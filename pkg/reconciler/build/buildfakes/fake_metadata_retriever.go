// Code generated by counterfeiter. DO NOT EDIT.
package buildfakes

import (
	"context"
	"sync"

	"github.com/pivotal/kpack/pkg/apis/build/v1alpha1"
	"github.com/pivotal/kpack/pkg/cnb"
	"github.com/pivotal/kpack/pkg/reconciler/build"
)

type FakeMetadataRetriever struct {
	GetBuiltImageStub        func(context.Context, *v1alpha1.Build) (cnb.BuiltImage, error)
	getBuiltImageMutex       sync.RWMutex
	getBuiltImageArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.Build
	}
	getBuiltImageReturns struct {
		result1 cnb.BuiltImage
		result2 error
	}
	getBuiltImageReturnsOnCall map[int]struct {
		result1 cnb.BuiltImage
		result2 error
	}
	GetCacheImageStub        func(context.Context, *v1alpha1.Build) (string, error)
	getCacheImageMutex       sync.RWMutex
	getCacheImageArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.Build
	}
	getCacheImageReturns struct {
		result1 string
		result2 error
	}
	getCacheImageReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMetadataRetriever) GetBuiltImage(arg1 context.Context, arg2 *v1alpha1.Build) (cnb.BuiltImage, error) {
	fake.getBuiltImageMutex.Lock()
	ret, specificReturn := fake.getBuiltImageReturnsOnCall[len(fake.getBuiltImageArgsForCall)]
	fake.getBuiltImageArgsForCall = append(fake.getBuiltImageArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.Build
	}{arg1, arg2})
	stub := fake.GetBuiltImageStub
	fakeReturns := fake.getBuiltImageReturns
	fake.recordInvocation("GetBuiltImage", []interface{}{arg1, arg2})
	fake.getBuiltImageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMetadataRetriever) GetBuiltImageCallCount() int {
	fake.getBuiltImageMutex.RLock()
	defer fake.getBuiltImageMutex.RUnlock()
	return len(fake.getBuiltImageArgsForCall)
}

func (fake *FakeMetadataRetriever) GetBuiltImageCalls(stub func(context.Context, *v1alpha1.Build) (cnb.BuiltImage, error)) {
	fake.getBuiltImageMutex.Lock()
	defer fake.getBuiltImageMutex.Unlock()
	fake.GetBuiltImageStub = stub
}

func (fake *FakeMetadataRetriever) GetBuiltImageArgsForCall(i int) (context.Context, *v1alpha1.Build) {
	fake.getBuiltImageMutex.RLock()
	defer fake.getBuiltImageMutex.RUnlock()
	argsForCall := fake.getBuiltImageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMetadataRetriever) GetBuiltImageReturns(result1 cnb.BuiltImage, result2 error) {
	fake.getBuiltImageMutex.Lock()
	defer fake.getBuiltImageMutex.Unlock()
	fake.GetBuiltImageStub = nil
	fake.getBuiltImageReturns = struct {
		result1 cnb.BuiltImage
		result2 error
	}{result1, result2}
}

func (fake *FakeMetadataRetriever) GetBuiltImageReturnsOnCall(i int, result1 cnb.BuiltImage, result2 error) {
	fake.getBuiltImageMutex.Lock()
	defer fake.getBuiltImageMutex.Unlock()
	fake.GetBuiltImageStub = nil
	if fake.getBuiltImageReturnsOnCall == nil {
		fake.getBuiltImageReturnsOnCall = make(map[int]struct {
			result1 cnb.BuiltImage
			result2 error
		})
	}
	fake.getBuiltImageReturnsOnCall[i] = struct {
		result1 cnb.BuiltImage
		result2 error
	}{result1, result2}
}

func (fake *FakeMetadataRetriever) GetCacheImage(arg1 context.Context, arg2 *v1alpha1.Build) (string, error) {
	fake.getCacheImageMutex.Lock()
	ret, specificReturn := fake.getCacheImageReturnsOnCall[len(fake.getCacheImageArgsForCall)]
	fake.getCacheImageArgsForCall = append(fake.getCacheImageArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.Build
	}{arg1, arg2})
	stub := fake.GetCacheImageStub
	fakeReturns := fake.getCacheImageReturns
	fake.recordInvocation("GetCacheImage", []interface{}{arg1, arg2})
	fake.getCacheImageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMetadataRetriever) GetCacheImageCallCount() int {
	fake.getCacheImageMutex.RLock()
	defer fake.getCacheImageMutex.RUnlock()
	return len(fake.getCacheImageArgsForCall)
}

func (fake *FakeMetadataRetriever) GetCacheImageCalls(stub func(context.Context, *v1alpha1.Build) (string, error)) {
	fake.getCacheImageMutex.Lock()
	defer fake.getCacheImageMutex.Unlock()
	fake.GetCacheImageStub = stub
}

func (fake *FakeMetadataRetriever) GetCacheImageArgsForCall(i int) (context.Context, *v1alpha1.Build) {
	fake.getCacheImageMutex.RLock()
	defer fake.getCacheImageMutex.RUnlock()
	argsForCall := fake.getCacheImageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMetadataRetriever) GetCacheImageReturns(result1 string, result2 error) {
	fake.getCacheImageMutex.Lock()
	defer fake.getCacheImageMutex.Unlock()
	fake.GetCacheImageStub = nil
	fake.getCacheImageReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeMetadataRetriever) GetCacheImageReturnsOnCall(i int, result1 string, result2 error) {
	fake.getCacheImageMutex.Lock()
	defer fake.getCacheImageMutex.Unlock()
	fake.GetCacheImageStub = nil
	if fake.getCacheImageReturnsOnCall == nil {
		fake.getCacheImageReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getCacheImageReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeMetadataRetriever) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getBuiltImageMutex.RLock()
	defer fake.getBuiltImageMutex.RUnlock()
	fake.getCacheImageMutex.RLock()
	defer fake.getCacheImageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMetadataRetriever) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ build.MetadataRetriever = new(FakeMetadataRetriever)
